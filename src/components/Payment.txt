'use client';

import React, { useState, useEffect } from 'react';
import Script from 'next/script';

// Extend the Window interface to include Razorpay
declare global {
    interface Window {
        Razorpay: any;  // You can use a more specific type if needed
    }
}

interface RazorpayOptions {
    key: string;
    amount: number;
    currency: string;
    name: string;
    description: string;
    image: string;
    order_id: string;
    handler: (response: { razorpay_payment_id: string; razorpay_signature: string }) => void;
    prefill: {
        name: string;
        email: string;
        contact: string;
    };
    theme: {
        color: string;
    };
}

interface BuyProps {
    amount: number; // Amount in paise (1000 = â‚¹10)
    customerName?: string;
    customerEmail?: string;
    customerContact?: string;
    productName: string;
}

const Buy: React.FC<BuyProps> = ({
    amount,
    customerName = 'Customer Name',
    customerEmail = 'customer@example.com',
    customerContact = '9999999999',
    productName,
}) => {
    const [loading, setLoading] = useState(false);
    const [paymentSuccess, setPaymentSuccess] = useState(false);
    const [razorpayLoaded, setRazorpayLoaded] = useState(false);

    useEffect(() => {
        // Check if Razorpay is loaded
        const checkRazorpay = () => {
            if (window.Razorpay) {
                setRazorpayLoaded(true);
            }
        };

        // Delay the check to ensure script is loaded
        const interval = setInterval(checkRazorpay, 100);

        // Stop the interval after 5 seconds to avoid infinite loop
        setTimeout(() => clearInterval(interval), 5000);

        return () => clearInterval(interval); // Cleanup on unmount
    }, []);

    const handlePayment = async () => {
        setLoading(true);

        try {
            const response = await fetch('/api/createOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ amount }),
            });

            if (!response.ok) {
                throw new Error('Failed to create Razorpay order');
            }

            const order = await response.json();

            if (!order || !order.id || !order.amount) {
                throw new Error('Invalid order data');
            }

            const razorpayKey = process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID;
            if (!razorpayKey) {
                throw new Error('Razorpay key is not defined');
            }

            const razorpayOptions: RazorpayOptions = {
                key: razorpayKey,
                amount: order.amount,
                currency: 'INR',
                name: 'VENDALYN',
                description: productName,
                image: '/favicon.png',
                order_id: order.id,
                handler: async (response: { razorpay_payment_id: string; razorpay_signature: string }) => {
                    const verifyResponse = await fetch('/api/verifyOrder', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            orderId: order.id,
                            razorpayPaymentId: response.razorpay_payment_id,
                            razorpaySignature: response.razorpay_signature,
                        }),
                    });

                    const verifyData = await verifyResponse.json();
                    if (verifyData.isOk) {
                        setPaymentSuccess(true);
                        alert('Payment was successful!');
                    } else {
                        alert('Payment verification failed');
                    }
                },
                prefill: {
                    name: customerName,
                    email: customerEmail,
                    contact: customerContact,
                },
                theme: {
                    color: '#3399cc',
                },
            };

            if (razorpayLoaded) {
                const razorpay = new (window as unknown as Window).Razorpay(razorpayOptions);
                razorpay.open();
            } else {
                alert('Razorpay is not loaded. Please try again later.');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Payment failed. Please try again.');
        } finally {
            setLoading(false);
        }
    };

    return (
        <div>
            <Script
                type="text/javascript"
                src="https://checkout.razorpay.com/v1/checkout.js"
                onLoad={() => setRazorpayLoaded(true)} // Set Razorpay as loaded once script is loaded
            />

            {paymentSuccess && (
                <div className="bg-green-100 text-green-800 p-4 rounded-md mb-4">
                    Payment was successful! Thank you for your purchase.
                </div>
            )}

            <button
                onClick={handlePayment}
                disabled={loading}
                className="mt-4 bg-black py-3 px-6 rounded-md text-white w-full hover:bg-gray-600 transition-colors duration-300 ease-in-out"
            >
                {loading ? 'Processing...' : 'BUY NOW'}
            </button>
        </div>
    );
};

export default Buy;
